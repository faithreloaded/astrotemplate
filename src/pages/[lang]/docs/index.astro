---
import '../../../styles/main.css';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import HeaderMega from '../../../components/header/header-mega/Header.astro';
import FooterGrid from '../../../components/footer/footer-grid/Footer.astro';
import { LOCALES, type Locale, loadT } from '../../../i18n';

export function getStaticPaths() {
  return (LOCALES as readonly string[]).map((lang) => ({ params: { lang } }));
}

const { lang } = Astro.params as { lang: Locale };
const t = await loadT(lang);
---

<BaseLayout 
  title={t('docs.headTitle')} 
  description={t('docs.headDescription')}
  lang={lang}
>
  <HeaderMega lang={lang} />
  
  <main class="main">
    <div class="container">
      <div class="docs-page">
        <div class="page-header">
          <h1>{t('docs.pageTitle')}</h1>
          <p>{t('docs.pageDescription')}</p>
        </div>

        <div class="docs-layout">
          <!-- Sidebar Navigation -->
          <nav class="docs-sidebar">
            <div class="sidebar-content">
              <h3>{t('docs.sidebarTitle')}</h3>
              <ul class="sidebar-nav">
                <li><a href="#getting-started" class="nav-link">{t('docs.nav.gettingStarted')}</a></li>
                <li><a href="#project-structure" class="nav-link">{t('docs.nav.projectStructure')}</a></li>
                <li><a href="#styling" class="nav-link">{t('docs.nav.styling')}</a></li>
                <li><a href="#components" class="nav-link">{t('docs.nav.components')}</a></li>
                <li><a href="#deployment" class="nav-link">{t('docs.nav.deployment')}</a></li>
                <li><a href="#customization" class="nav-link">{t('docs.nav.customization')}</a></li>
                <li><a href="#support" class="nav-link">{t('docs.nav.support')}</a></li>
              </ul>
            </div>
          </nav>

          <!-- Main Content -->
          <div class="docs-content">
            <!-- Getting Started -->
            <section id="getting-started" class="docs-section">
              <h2>{t('docs.gettingStarted.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.gettingStarted.installationTitle')}</h3>
              <p>{t('docs.gettingStarted.installationText')}</p>
              <div class="code-block">
                <code>git clone [repository-url]<br>
cd astrotemplate<br>
npm install</code>
              </div>
            </div>
            
            <div class="docs-card">
              <h3>{t('docs.gettingStarted.developmentTitle')}</h3>
              <p>{t('docs.gettingStarted.developmentText')}</p>
              <div class="code-block">
                <code>npm run dev</code>
              </div>
              <p>{t('docs.gettingStarted.siteAvailable')} <code>http://localhost:4321</code></p>
            </div>

            <div class="docs-card">
              <h3>{t('docs.gettingStarted.buildTitle')}</h3>
              <p>{t('docs.gettingStarted.buildText')}</p>
              <div class="code-block">
                <code>npm run build</code>
              </div>
            </div>
          </section>

            <!-- Project Structure -->
            <section id="project-structure" class="docs-section">
              <h2>{t('docs.projectStructure.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.projectStructure.directoryLayoutTitle')}</h3>
              <div class="code-block">
                <code>src/<br>
├── components/          # Reusable components<br>
│   ├── header/         # Header variations<br>
│   ├── hero/           # Hero sections<br>
│   ├── about/          # About sections<br>
│   ├── services/       # Services sections<br>
│   ├── testimonials/   # Testimonials<br>
│   ├── faq/            # FAQ sections<br>
│   ├── cta/            # Call-to-action<br>
│   ├── footer/         # Footer variations<br>
│   └── ...<br>
├── layouts/            # Page layouts<br>
├── pages/              # Astro pages<br>
└── styles/             # Global styles<br>
    ├── tokens.css      # Design tokens<br>
    ├── globals.css     # Global styles<br>
    └── main.css        # Main stylesheet</code>
              </div>
            </div>
          </section>

            <!-- Styling -->
            <section id="styling" class="docs-section">
              <h2>{t('docs.styling.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.styling.designTokensTitle')}</h3>
              <p>{t('docs.styling.designTokensText')} <code>src/styles/tokens.css</code>:</p>
              <ul>
                <li><strong>{t('docs.styling.list.colors')}</strong> <code>--color-black</code>, <code>--color-white</code>, etc.</li>
                <li><strong>{t('docs.styling.list.typography')}</strong> <code>--font-family</code>, <code>--font-size-*</code></li>
                <li><strong>{t('docs.styling.list.spacing')}</strong> <code>--space-1</code> to <code>--space-8</code></li>
                <li><strong>{t('docs.styling.list.layout')}</strong> <code>--max-width</code>, <code>--radius-lg</code></li>
              </ul>
            </div>

            <div class="docs-card">
              <h3>{t('docs.styling.globalClassesTitle')}</h3>
              <p>{t('docs.styling.globalClassesText')}</p>
              <ul>
                <li><strong>{t('docs.styling.globalList.buttons')}</strong> <code>.btn-primary</code>, <code>.btn-secondary</code>, <code>.btn-link</code></li>
                <li><strong>{t('docs.styling.globalList.pills')}</strong> <code>.section-pill</code>, <code>.pill-outline</code></li>
                <li><strong>{t('docs.styling.globalList.layout')}</strong> <code>.container</code>, <code>.section</code></li>
                <li><strong>{t('docs.styling.globalList.typography')}</strong> <code>.section-title</code></li>
              </ul>
            </div>

            <div class="docs-card">
              <h3>{t('docs.styling.customizationTitle')}</h3>
              <p>{t('docs.styling.customizationText')}</p>
              <ol>
                <li>{t('docs.styling.customizationSteps.s1')} <code>tokens.css</code></li>
                <li>{t('docs.styling.customizationSteps.s2')}</li>
                <li>{t('docs.styling.customizationSteps.s3')} <code>globals.css</code></li>
              </ol>
            </div>
          </section>

            <!-- Components -->
            <section id="components" class="docs-section">
              <h2>{t('docs.components.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.components.usingComponentsTitle')}</h3>
              <p>{t('docs.components.usingComponentsText')}</p>
              <div class="code-block">
                <code>---<br>
import HeaderMega from '../components/header/header-mega/Header.astro';<br>
import SimpleCentered from '../components/hero/simple-centered/SimpleCentered.astro';<br>
---<br><br>
&lt;HeaderMega /&gt;<br>
&lt;SimpleCentered /&gt;</code>
              </div>
            </div>

            <div class="docs-card">
              <h3>{t('docs.components.availableSectionsTitle')}</h3>
              <ul>
                <li><strong>{t('docs.components.availableList.headers')}</strong></li>
                <li><strong>{t('docs.components.availableList.heroes')}</strong></li>
                <li><strong>{t('docs.components.availableList.about')}</strong></li>
                <li><strong>{t('docs.components.availableList.services')}</strong></li>
                <li><strong>{t('docs.components.availableList.testimonials')}</strong></li>
                <li><strong>{t('docs.components.availableList.faq')}</strong></li>
                <li><strong>{t('docs.components.availableList.cta')}</strong></li>
                <li><strong>{t('docs.components.availableList.footers')}</strong></li>
              </ul>
            </div>
          </section>

            <!-- Deployment -->
            <section id="deployment" class="docs-section">
              <h2>{t('docs.deployment.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.deployment.staticHostingTitle')}</h3>
              <p>{t('docs.deployment.staticHostingText')}</p>
              <ul>
                <li><strong>{t('docs.deployment.list.vercel')}</strong></li>
                <li><strong>{t('docs.deployment.list.netlify')}</strong> <code>dist</code></li>
                <li><strong>{t('docs.deployment.list.ghpages')}</strong></li>
                <li><strong>{t('docs.deployment.list.any')}</strong> <code>dist</code></li>
              </ul>
            </div>

            <div class="docs-card">
              <h3>{t('docs.deployment.buildOutputTitle')}</h3>
              <p>{t('docs.deployment.buildOutputText')} <code>dist</code>.</p>
            </div>

            <div class="docs-card">
              <h3>{t('docs.deployment.envTitle')}</h3>
              <p>{t('docs.deployment.envText')}</p>
            </div>
          </section>

            <!-- Customization -->
            <section id="customization" class="docs-section">
              <h2>{t('docs.customization.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.customization.contentTitle')}</h3>
              <p>{t('docs.customization.contentText')}</p>
            </div>

            <div class="docs-card">
              <h3>{t('docs.customization.imagesTitle')}</h3>
              <p>{t('docs.customization.imagesText')} <code>public/images</code>:</p>
              <ul>
                <li><code>logo.svg</code> - {t('docs.customization.imagesList.logo')}</li>
                <li><code>isotipo.svg</code> - {t('docs.customization.imagesList.isotipo')}</li>
                <li><code>favicon.png</code> - {t('docs.customization.imagesList.favicon')}</li>
                <li><code>images/placeholder/</code> - {t('docs.customization.imagesList.placeholder')}</li>
                <li><code>images/logos-carousel/</code> - {t('docs.customization.imagesList.logos')}</li>
              </ul>
            </div>

            <div class="docs-card">
              <h3>{t('docs.customization.navigationTitle')}</h3>
              <p>{t('docs.customization.navigationText')}</p>
            </div>
          </section>

            <!-- Support -->
            <section id="support" class="docs-section">
              <h2>{t('docs.support.title')}</h2>
            <div class="docs-card">
              <h3>{t('docs.support.resourcesTitle')}</h3>
              <ul>
                <li><a href="https://docs.astro.build/" target="_blank">{t('docs.support.astroDocs')}</a></li>
                <li><a href="https://lucide.dev/" target="_blank">{t('docs.support.lucide')}</a></li>
                <li><a href={`/${lang}/global-styles`}>{t('docs.support.globalStylesRef')}</a></li>
              </ul>
            </div>

            <div class="docs-card">
              <h3>{t('docs.support.featuresTitle')}</h3>
              <ul>
                <li>{t('docs.support.featuresList.responsive')}</li>
                <li>{t('docs.support.featuresList.modernCss')}</li>
                <li>{t('docs.support.featuresList.componentArch')}</li>
                <li>{t('docs.support.featuresList.seo')}</li>
                <li>{t('docs.support.featuresList.fast')}</li>
                <li>{t('docs.support.featuresList.noFramework')}</li>
              </ul>
            </div>
            </section>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <FooterGrid />
</BaseLayout>

<script>
  // Smooth scroll and active navigation
  document.addEventListener('DOMContentLoaded', function() {
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('.docs-section');

    // Smooth scroll for navigation links
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href')?.substring(1);
        if (targetId) {
          const targetSection = document.getElementById(targetId);
          
          if (targetSection) {
            targetSection.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });

    // Update active navigation on scroll
    function updateActiveNav() {
      let current = '';
      sections.forEach(section => {
        const sectionTop = (section as HTMLElement).offsetTop - 150;
        const sectionHeight = section.clientHeight;
        if (window.pageYOffset >= sectionTop && window.pageYOffset < sectionTop + sectionHeight) {
          const sectionId = section.getAttribute('id');
          if (sectionId) {
            current = sectionId;
          }
        }
      });

      navLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('href') === '#' + current) {
          link.classList.add('active');
        }
      });
    }

    // Listen for scroll events
    window.addEventListener('scroll', updateActiveNav);
    
    // Set initial active state
    updateActiveNav();
  });
</script>
