---
import './Header.css';
import ButtonPrimary from '../../buttons/primary/ButtonPrimary.astro';
import { loadT, getLangFromUrl, type Locale } from '../../../i18n';
import { getCollection } from 'astro:content';

interface Props { lang?: Locale }
const { lang: langProp } = Astro.props as Props;
const lang: Locale = langProp ?? getLangFromUrl(Astro.url);
const t = await loadT(lang);

// Obtener posts para manejar traducciones del blog
const allPosts = await getCollection('blog');

// Función para manejar las rutas del blog
function getBlogTranslationUrl(currentLang: Locale, targetLang: Locale, currentPath: string): string {
  // Si estamos en una ruta de blog individual (/es/blog/slug o /en/blog/slug)
  const blogMatch = currentPath.match(/^\/(es|en)\/blog\/(.+)$/);
  if (blogMatch) {
    const [, currentBlogLang, slug] = blogMatch;
    
    // Buscar el post actual para obtener sus traducciones
    const currentPost = allPosts.find(p => p.id === `${currentBlogLang}/${slug}.mdx`);
    
    if (currentPost && currentPost.data.translations && currentPost.data.translations[targetLang]) {
      // Si existe traducción, ir al post traducido
      return `/${targetLang}/blog/${currentPost.data.translations[targetLang]}`;
    } else {
      // Si no hay traducción, ir al blog del idioma objetivo
      return `/${targetLang}/blog`;
    }
  }
  
  // Si estamos en la página de blog (/es/blog o /en/blog)
  if (currentPath.match(/^\/(es|en)\/blog\/?$/)) {
    return `/${targetLang}/blog`;
  }
  
  // Para cualquier otra ruta, cambiar solo el prefijo
  return currentPath.replace(/^\/(es|en)/, `/${targetLang}`);
}

const toES = getBlogTranslationUrl(lang, 'es', Astro.url.pathname);
const toEN = getBlogTranslationUrl(lang, 'en', Astro.url.pathname);
const prefix = `/${lang}`;
---

<header class="header-mega" data-lang={lang}>
  <div class="container">
    <div class="header-mega-content">
      <div class="logo">
        <a href={`${prefix}/`}>
          <img src="/images/logo.svg" alt="Logo" class="logo-img" />
        </a>
      </div>
      
      <nav class="nav-mega desktop-nav">
        <div class="nav-item-mega">
          <a href={`${prefix}/`} class="nav-link-mega">{t('header.nav.home')}</a>
        </div>
        
        <div class="nav-item-mega">
          <a href={`${prefix}/components`} class="nav-link-mega">{t('header.nav.components')}</a>
        </div>
        
        <div class="nav-item-mega">
          <a href={`${prefix}/global-styles`} class="nav-link-mega">{t('header.nav.globalStyles')}</a>
        </div>
        
        <div class="nav-item-mega">
          <a href={`${prefix}/docs`} class="nav-link-mega">{t('header.nav.docs')}</a>
        </div>
        <div class="nav-item-mega">
          <a href={`${prefix}/blog`} class="nav-link-mega">Blog</a>
        </div>
      </nav>
      
      <div class="header-mega-actions">
        <div class="lang-toggle" aria-label="Language selector">
          <div class="lang-switch" data-active={lang.toUpperCase()} id="lang-switch">
            <div class="lang-highlight" aria-hidden="true"></div>
            <a class="lang-option" href={toES} aria-pressed={lang==='es'} data-lang="ES">ES</a>
            <a class="lang-option" href={toEN} aria-pressed={lang==='en'} data-lang="EN">EN</a>
          </div>
        </div>
        <div class="buy-desktop">
          <ButtonPrimary href={`${prefix}/buy`}>
            {t('header.actions.buy')}
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M7 17L17 7M17 7H7M17 7V17"/>
            </svg>
          </ButtonPrimary>
        </div>
        
        <button class="menu-toggle mobile-nav" id="menu-toggle-mega">
          <span></span>
          <span></span>
          <span></span>
        </button>
      </div>
    </div>
    
    <div class="mobile-overlay" id="mobile-overlay-mega"></div>
    <nav class="mobile-nav-menu" id="mobile-nav-mega">
      <div class="mobile-nav-header">
        <img src="/images/logo.svg" alt="Logo" class="mobile-logo" />
        <button class="mobile-close-btn" id="mobile-close-mega">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>
      <div class="mobile-nav-links">
        <a href={`${prefix}/`} class="mobile-nav-link">{t('header.nav.home')}</a>
        <a href={`${prefix}/components`} class="mobile-nav-link">{t('header.nav.components')}</a>
        <a href={`${prefix}/global-styles`} class="mobile-nav-link">{t('header.nav.globalStyles')}</a>
        <a href={`${prefix}/docs`} class="mobile-nav-link">{t('header.nav.docs')}</a>
        <a href={`${prefix}/blog`} class="mobile-nav-link">Blog</a>
      </div>
      <div class="mobile-nav-footer">
        <ButtonPrimary href={`${prefix}/buy`}>
          {t('header.actions.buy')}
        </ButtonPrimary>
      </div>
    </nav>
  </div>
</header>

<script>
  const menuToggle = document.getElementById('menu-toggle-mega');
  const mobileNav = document.getElementById('mobile-nav-mega');
  const mobileOverlay = document.getElementById('mobile-overlay-mega');
  const mobileClose = document.getElementById('mobile-close-mega');

  function closeMenu() {
    if (mobileNav) mobileNav.classList.remove('active');
    if (mobileOverlay) mobileOverlay.classList.remove('active');
    document.body.classList.remove('menu-open');
    if (menuToggle) menuToggle.classList.remove('active');
  }

  function openMenu() {
    if (mobileNav) mobileNav.classList.add('active');
    if (mobileOverlay) mobileOverlay.classList.add('active');
    document.body.classList.add('menu-open');
    if (menuToggle) menuToggle.classList.add('active');
  }

  if (menuToggle && mobileNav && mobileOverlay && mobileClose) {
    mobileNav.classList.add('no-transition');
    mobileOverlay.classList.add('no-transition');
    closeMenu();
    requestAnimationFrame(() => {
      mobileNav.classList.remove('no-transition');
      mobileOverlay.classList.remove('no-transition');
    });
    menuToggle.addEventListener('click', () => {
      if (mobileNav.classList.contains('active')) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    mobileClose.addEventListener('click', closeMenu);
    mobileOverlay.addEventListener('click', closeMenu);

    const mobileLinks = mobileNav.querySelectorAll('.mobile-nav-link');
    mobileLinks.forEach(link => {
      link.addEventListener('click', closeMenu);
    });
    window.addEventListener('pageshow', closeMenu);
    window.addEventListener('load', closeMenu);
    window.addEventListener('beforeunload', closeMenu);
  }

  // Animación del toggle de idioma antes de navegar
  const langSwitch = document.getElementById('lang-switch');
  if (langSwitch) {
    const options = langSwitch.querySelectorAll('.lang-option');
    options.forEach((opt) => {
      opt.addEventListener('click', (e) => {
        const href = (opt as HTMLAnchorElement).getAttribute('href');
        const targetLang = opt.getAttribute('data-lang');
        if (!href || !targetLang) return;
        e.preventDefault();
        // Mover la pastilla
        langSwitch.setAttribute('data-active', targetLang);
        // Navegar tras la animación
        setTimeout(() => {
          window.location.assign(href);
        }, 140);
      });
    });
  }
</script>